package main

/*
 –°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥—É –≥—Ä–∞–≤—Ü—ñ–≤

 –¶–µ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–æ—ó —Ä–µ–π—Ç–∏–Ω–≥—É –∞ —Å–∞–º–µ:
 - –≥—Ä–∞–≤—Ü—è–º–∏
 - –ø–µ—Ä–µ–º–æ–≥–∞–º–∏ —á–∏ –ø–æ—Ä–∞–∑–∫–∞–º–∏ –≥—Ä–∞–≤—Ü—ñ–≤
 - —Ä–∞—Ö—É–Ω–∫–∞–º–∏ –≥—Ä–∞–≤—Ü—ñ–≤(–±–∞–ª–∞–º–∏)

 –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –ø—Ä–æ–≥—Ä–∞–º–º–∏:
 - –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≥—Ä–∞–≤—Ü—è–º–∏:
	-–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤
	- –í–∏–¥–∞–ª–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—ñ–≤ —ñ–∑ —Å–∏—Å—Ç–µ–º–∏
	- –ü–æ—à—É–∫ –≥—Ä–∞–≤—Ü—è –∑–∞ –Ω—ñ–∫–æ–º
	- –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤
 - –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥–æ–º:
	- –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –≥—Ä–∞–≤—Ü—è –ø—ñ—Å–ª—è –º–∞—Ç—á—É
	- –ü–µ—Ä–µ–≥–ª—è–¥ —Ç–æ–ø-10 –Ω–∞–π–∫—Ä–∞—â–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤
	- –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥—É
	- –ü–æ—à—É–∫ –≥—Ä–∞–≤—Ü—ñ–≤ –∑–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥—É
 - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
	- –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º–∞—Ç—á—ñ–≤ –≥—Ä–∞–≤—Ü—è
	- –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ —Ç–∞ –Ω–∞–π–≥—ñ—Ä—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è
	- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ —ñ –ø—Ä–æ–≥—Ä–∞–≤—à–∏—Ö
*/

import (
	"bufio"
	"fmt"
	"os"
	"strings"
)

// –≥–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
var players []string
var scores = make(map[string]int)
var matchesPlayed = make(map[string]int)
var wins = make(map[string]int)
var losses = make(map[string]int)

// —á–∏—Ç–∞—á—å —Å—Ç—Ä–æ–∫–∏
var reader *bufio.Reader = bufio.NewReader(os.Stdin)

// —Ñ—É–Ω–∫—Ü—ñ—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
func sortPlayer(arr []string, start, end int) {
	if start < end {
		pivotIndex := partition(arr, start, end)
		sortPlayer(arr, start, pivotIndex-1)
		sortPlayer(arr, pivotIndex+1, end)
	}
}

func partition(arr []string, start, end int) int {
	pivot := scores[arr[end]]
	i := start - 1

	for j := start; j < end; j++ {
		if scores[arr[j]] > pivot {
			i++
			temp := arr[i]
			arr[i] = arr[j]
			arr[j] = temp
		}
	}

	temp := arr[i+1]
	arr[i+1] = arr[end]
	arr[end] = temp

	return i + 1
}

// —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
func callSortPlayer() {
	sortPlayer(players, 0, len(players)-1)
}

// –†–µ—î—Å—Ç—Ä—É—î –Ω–æ–≤–æ–≥–æ –≥—Ä–∞–≤—Ü—è –∑ –ø–æ—á–∞—Ç–∫–æ–≤–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º 1000
func registerPlayer(nickname string) bool {
	//–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—è
	if !playerExists(nickname) {
		//–¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –≥—Ä–∞–≤—Ü—è
		players = append(players, nickname)
		scores[nickname] = 1000
	} else if playerExists(nickname) {
		return false
	}
	return true
}

// –í–∏–¥–∞–ª—è—î –≥—Ä–∞–≤—Ü—è –∑ —Å–∏—Å—Ç–µ–º–∏
func removePlayer(nickname string) bool {
	//–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—è
	if playerExists(nickname) {
		//–≤–∏–¥–∞–ª–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—è
		delete(scores, nickname)
		index := findPlayerIndex(nickname)
		players = append(players[:index], players[index+1:]...)
	} else if !playerExists(nickname) {
		return false
	}
	return true
}

// –ó–Ω–∞—Ö–æ–¥–∏—Ç—å —ñ–Ω–¥–µ–∫—Å –≥—Ä–∞–≤—Ü—è –≤ —Å–ª–∞–π—Å—ñ
func findPlayerIndex(nickname string) int {
	for i, name := range players {
		if name == nickname {
			return i
		}
	}
	return -1
}

// –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —ñ—Å–Ω—É—î –≥—Ä–∞–≤–µ—Ü—å
func playerExists(nickname string) bool {
	for _, name := range players {
		if name == nickname {
			return true
		}
	}
	return false
}

// –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤ –∑ —ó—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é
func displayAllPlayers() {
	// –≤–∏–∫–ª–∏–∫–∞—î —Ñ—É–Ω–∫—Ü—ñ—é —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
	callSortPlayer()
	for i, nick := range players {
		fmt.Printf("%d. %s –†–µ–π—Ç–∏–Ω–≥ - %d | –ú–∞—Ç—á—ñ–≤: %v | –ü–µ—Ä–µ–º–æ–≥: %v | –ü–æ—Ä–∞–∑–æ–∫: %v\n", i+1, nick, scores[nick], matchesPlayed[nick], wins[nick], losses[nick])
	}
}

// –û–Ω–æ–≤–ª—é—î —Ä–µ–π—Ç–∏–Ω–≥ –ø—ñ—Å–ª—è –º–∞—Ç—á—É (true = –ø–µ—Ä–µ–º–æ–≥–∞, false = –ø–æ—Ä–∞–∑–∫–∞)
func updateRating(nickname string, won bool, pointsChange int) {
	// –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—è
	if playerExists(nickname) {
		//–æ–Ω–æ–≤–ª—é—î —Ä–µ–π—Ç–∏–Ω–≥ –∑–≥—ñ–¥–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≥—Ä–∏ (–ø–µ—Ä–µ–º–æ–≥–∏ —á–∏ –ø–æ—Ä–∞–∑–∫–∏)
		if won == true {
			wins[nickname] += 1
			scores[nickname] += pointsChange
			matchesPlayed[nickname] += 1
		} else if won == false {
			losses[nickname] += 1
			scores[nickname] -= pointsChange
			matchesPlayed[nickname] += 1
		}
		fmt.Printf("\n–†–µ–π—Ç–∏–Ω–≥ –≥—Ä–∞–≤—Ü—è \"%s\" –æ–Ω–æ–≤–ª–µ–Ω–æ! –ù–æ–≤–∏–π —Ä–µ–π—Ç–∏–Ω–≥: %d ‚úÖ\n", nickname, scores[nickname])
	} else if !playerExists(nickname) {
		fmt.Printf("\n–ù–∞–∂–∞–ª—å –Ω–µ–≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥ –≥—Ä–∞–≤—Ü—è \"%s\".–¢–∞–∫–æ–≥–æ –≥—Ä–∞–≤—Ü—è –Ω–µ —ñ—Å–Ω—É—î! ‚ùå", nickname)
	}
}

// –ü–æ–≤–µ—Ä—Ç–∞—î —Ç–æ–ø-10 –≥—Ä–∞–≤—Ü—ñ–≤ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º
func getTopPlayers(count int) []string {
	//–≤–∏–∫–ª–∏–∫–∞—î —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
	callSortPlayer()
	//—Å–ª–∞–π—Å –¥–ª—è –∑–±–µ—Ä–µ–≥–∞–Ω–Ω—è —Ç–æ–ø —ñ–≥—Ä–æ–∫—ñ–≤
	var topPl []string
	//–¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è —Ç–æ–ø—É —ñ–≥—Ä–æ–∫—ñ–≤
	for i := 0; i < count; i++ {
		topPl = append(topPl, players[i])
		fmt.Printf("%d. %s - %d\n", i+1, players[i], scores[players[i]])
	}
	return topPl
}

// –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤ —É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ —Ä–µ–π—Ç–∏–Ω–≥—É
func findPlayersByRatingRange(minRating, maxRating int) []string {
	//–≤–∏–∫–ª–∏–∫–∞—î —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
	callSortPlayer()
	//—Å–ª–∞–π—Å –¥–ª—è –∑–±–µ—Ä–µ–≥–∞–Ω–Ω—è —ñ–≥—Ä–æ–∫—ñ–≤ –∑–∞ –¥—ñ–∞–ø–æ–∑–æ–Ω–Ω–æ–º
	var rangePl []string
	//–¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–∞ –≤–∏–≤—ñ–¥ –≥—Ä–∞–≤—Ü—ñ–≤ —É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ
	for i, _ := range players {
		rating := scores[players[i]]
		if rating >= minRating && rating <= maxRating {
			rangePl = append(rangePl, players[i])
			fmt.Printf("%d. %s - %d\n", i+1, players[i], rating)
		}
	}
	return rangePl
}

// –†–æ–∑—Ä–∞—Ö–æ–≤—É—î —Å–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–π—Ç–∏–Ω–≥ –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤
func calculateAverageRating() float64 {
	//–∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä–µ–≥–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥—É —ñ–≥—Ä–æ–∫—ñ–≤
	var avg float64
	//—Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
	for i, _ := range scores {
		avg += float64(scores[i])
	}
	avg = avg / float64(len(scores))
	return avg
}

// –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –≥—Ä–∞–≤—Ü—è –∑ –Ω–∞–π–≤–∏—â–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
func getBestPlayer() string {
	//–∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä–µ–≥–∞–Ω–Ω—è –Ω—ñ–∫—É –∫—Ä–∞—â–æ–≥–æ —ñ–≥—Ä–æ–∫–∞
	var bestPl string
	//–∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä–µ–≥–∞–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫—Ä–∞—â–æ–≥–æ —ñ–≥—Ä–æ–∫–∞
	var bestScore int
	//–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫—Ä–∞—â–æ–≥–æ –≥—Ä–∞–≤—Ü—è
	for nick, score := range scores {
		if score > bestScore || bestPl == "" {
			bestPl = nick
			bestScore = score
		}
	}
	return bestPl
}

// –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –≥—Ä–∞–≤—Ü—è –∑ –Ω–∞–π–Ω–∏–∂—á–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
func getWorstPlayer() string {
	//–∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä–µ–≥–∞–Ω–Ω—è –Ω—ñ–∫—É –≥—ñ—Ä—à–æ–≥–æ —ñ–≥—Ä–æ–∫–∞
	var worstPl string
	//–∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä–µ–≥–∞–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –≥—ñ—Ä—à–æ–≥–æ —ñ–≥—Ä–æ–∫–∞
	var worstScore int
	//–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≥—ñ—Ä—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è
	for nick, score := range scores {
		if score < worstScore || worstPl == "" {
			worstPl = nick
			worstScore = score
		}
	}
	return worstPl
}

// –†–æ–∑—Ä–∞—Ö–æ–≤—É—î –≤—ñ–¥—Å–æ—Ç–æ–∫ –ø–µ—Ä–µ–º–æ–≥ –≥—Ä–∞–≤—Ü—è
func calculateWinRate(nickname string) float64 {
	//–∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä–µ–≥–∞–Ω–Ω—è –≤—ñ–¥—Å–æ—Ç–∫—É –ø–µ—Ä–µ–º–æ–≥ –≥—Ä–∞–≤—Ü—è
	var winRate float64
	//–∑–º—ñ–Ω–Ω–∞ –∑–±–µ—Ä–µ–≥–∞—î –∑—ñ–≥—Ä–∞–Ω—ñ –º–∞—Ç—á—ñ –≥—Ä–∞–≤—Ü–µ–º
	totalmatches := matchesPlayed[nickname]

	//–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–Ω—Ä–µ–π—Ç—É
	if playerExists(nickname) && totalmatches != 0 {
		winRate = float64(wins[nickname]) / float64(matchesPlayed[nickname]) * 100
	} else if !playerExists(nickname) {
		fmt.Println("–¢–∞–∫–æ–≥–æ –≥—Ä–∞–≤—Ü—è –Ω–µ —ñ—Å–Ω—É—î! ‚ùå")
	}
	return winRate
}

// –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –¥–µ—Ç–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä–∞–≤—Ü—è
func displayPlayerStats(nickname string) {
	//–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—è —Ç–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	if playerExists(nickname) {
		fmt.Printf("\nüìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∞–≤—Ü—è \"%s\":\n", nickname)
		fmt.Printf("üèÖ –ü–æ—Ç–æ—á–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: %d\n", scores[nickname])
		fmt.Printf("üéÆ –ó—ñ–≥—Ä–∞–Ω–æ –º–∞—Ç—á—ñ–≤: %d\n", matchesPlayed[nickname])
		fmt.Printf("‚úÖ –ü–µ—Ä–µ–º–æ–≥–∏: %d\n", wins[nickname])
		fmt.Printf("‚ùå –ü–æ—Ä–∞–∑–∫–∏: %d\n", losses[nickname])
		fmt.Printf("üìä –í—ñ–¥—Å–æ—Ç–æ–∫ –ø–µ—Ä–µ–º–æ–≥: %.1f%%\n", calculateWinRate(nickname))
	} else if !playerExists(nickname) {
		fmt.Println("\n–¢–∞–∫–æ–≥–æ –≥—Ä–∞–≤—Ü—è –Ω–µ —ñ—Å–Ω—É—î! ‚ùå")
	}
}

// –ü–æ–∫–∞–∑—É—î –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º–∏
func displaySystemStats() {
	//–∑–º—ñ–Ω–Ω–∏ –¥–ª—è –∑–±–µ—Ä–µ–≥–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—Ç—á—ñ–≤, –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ø–µ—Ä–µ–º–æ–≥, –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ø–æ—Ä–∞–∑–æ–∫
	totalmatches := 0
	totalWins := 0
	totalLosses := 0

	//–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—Ç—á—ñ–≤, –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ø–µ—Ä–µ–º–æ–≥, –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ø–æ—Ä–∞–∑–æ–∫
	for _, nick := range players {
		totalmatches += matchesPlayed[nick]
		totalWins += wins[nick]
		totalLosses += losses[nick]
	}

	//–≤–∏–≤–µ–¥–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	fmt.Printf("üë• –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ì—Ä–∞–≤—Ü—ñ–≤: %d\n", len(players))
	fmt.Printf("üéÆ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—Ç—á—ñ–≤:  %d\n", totalmatches)
	fmt.Printf("‚úÖ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–º–æ–≥: %d\n", totalWins)
	fmt.Printf("‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Ä–∞–∑–æ–∫:  %d\n", totalLosses)
	fmt.Printf("üìä –°–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–π—Ç–∏–Ω–≥: %.2f\n", calculateAverageRating())
	fmt.Printf("üèÜ –ù–∞–π–∫—Ä–∞—â–∏–π –≥—Ä–∞–≤–µ—Ü—å:  %s\n", getBestPlayer())
	fmt.Printf("üê¢ –ù–∞–π–≥—ñ—Ä—à–∏–π –≥—Ä–∞–≤–µ—Ü—å: %s\n", getWorstPlayer())
}

// –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –º–µ–Ω—é
func displayMenu() {
	fmt.Println("1. –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –≥—Ä–∞–≤—Ü—è ‚úÖ")
	fmt.Println("2. –í–∏–¥–∞–ª–∏—Ç–∏ –≥—Ä–∞–≤—Ü—è ‚ùå")
	fmt.Println("3. –û–Ω–æ–≤–∏—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥ –ø—ñ—Å–ª—è –º–∞—Ç—á—É üîÑ")
	fmt.Println("4. –ó–Ω–∞–π—Ç–∏ –≥—Ä–∞–≤—Ü—è üîç")
	fmt.Println("5. –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤ üë•")
	fmt.Println("6. –¢–æ–ø-10 –≥—Ä–∞–≤—Ü—ñ–≤ üèÜ")
	fmt.Println("7. –ü–æ—à—É–∫ –∑–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥—É üîç")
	fmt.Println("8. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∞–≤—Ü—è üìä")
	fmt.Println("9. –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä")
	fmt.Println("10. –í–∏—Ö—ñ–¥ üëã")
}

// –û—Ç—Ä–∏–º—É—î —Ç–µ–∫—Å—Ç–æ–≤–µ –≤–≤–µ–¥–µ–Ω–Ω—è
func getStringInput(prompt string) string {
	var input string
	fmt.Print(prompt)
	input, _ = reader.ReadString('\n')
	return input
}

// –û—Ç—Ä–∏–º—É—î —á–∏—Å–ª–æ–≤–µ –≤–≤–µ–¥–µ–Ω–Ω—è
func getIntInput(prompt string) int {
	fmt.Print(prompt)
	input, _ := reader.ReadString('\n')
	input = strings.TrimSpace(input)

	//–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–±—ñ–ª–∏
	if strings.ContainsAny(input, " \t") {
		fmt.Println("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è. –í–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —á–∏—Å–ª–æ –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤. ‚ùå")
		return -1
	}

	//–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–≤–µ–¥–µ–Ω—è —á–∏—Å–ª–∞
	var value int
	_, err := fmt.Sscanf(input, "%d", &value)
	if err != nil {
		fmt.Println("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è. –í–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —á–∏—Å–ª–æ. ‚ùå")
		return -1
	}
	return value
}

// –û–ü–¶–Ü–á

// –æ–ø—Ü—ñ—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≥—Ä–∞–≤—Ü—è
func choiseRegPlayer() {
	fmt.Println("\n--- –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≥—Ä–∞–≤—Ü—è --- üéâ")

	// –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω—ñ–∫–Ω–µ–π–º–∞
	input := getStringInput("–í–≤–µ–¥—ñ—Ç—å –Ω—ñ–∫–Ω–µ–π–º –≥—Ä–∞–≤—Ü—è: ")
	input = strings.TrimSpace(input)

	//–≤–∏–≤—ñ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ä–µ–µ—Å—Ç—Ä–∞—Ü—ñ—é
	if registerPlayer(input) {
		fmt.Printf("\n–ì—Ä–∞–≤–µ—Ü—å \"%s\" —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–º 1000! ‚úÖ\n", input)
	} else {
		fmt.Printf("\n–ù–∞–∂–∞–ª—å –≥—Ä–∞–≤—Ü—è \"%s\" –Ω–µ –∑–∞—Ä–µ–µ—Å—Ç—Ä–æ–≤–∞–Ω–æ.–¢–æ–º—É —â–æ –≥—Ä–∞–≤–µ—Ü—å —Å —Ç–∞–∫–∏–º –Ω—ñ–∫–æ–º –≤–∂–µ —ñ—Å–Ω—É—î! ‚ùå\n", input)
	}
}

// –æ–ø—Ü—ñ—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—è
func choiseDeletePlayer() {
	fmt.Println("\n--- –í–∏–¥–∞–ª–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—è --- ‚ùå")

	//–æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω—ñ–∫—É
	input := getStringInput("–í–≤–µ–¥—ñ—Ç—å –Ω—ñ–∫–Ω–µ–π–º –≥—Ä–∞–≤—Ü—è: ")
	input = strings.TrimSpace(input)

	//–≤–∏–≤—ñ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
	if removePlayer(input) {
		fmt.Printf("\n–ì—Ä–∞–≤–µ—Ü—å \"%s\" —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω! ‚úÖ\n", input)
	} else {
		fmt.Printf("\n–ù–∞–∂–∞–ª—å –≥—Ä–∞–≤—Ü—è \"%s\" –Ω–µ –≤–∏–¥–∞–ª–µ–Ω–æ.–¢–æ–º—É —â–æ —Ç–∞–∫–æ–≥–æ –≥—Ä–∞–≤—Ü—è –Ω–µ —ñ—Å–Ω—É—î! ‚ùå\n", input)
	}
}

// –æ–ø—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É –≥—Ä–∞–≤—Ü—è
func choiseUpdateRating() {
	fmt.Println("\n--- –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É --- üîÑ")

	//–æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω—ñ–∫—É, –ø–µ—Ä–µ–º–æ–≥–∏ —á–∏ –ø–æ—Ä–∞–∑–∫–∏, –∑–º—ñ–Ω–∏ —Ä–µ–π—Ç–∏–Ω–≥—É
	nick := getStringInput("–í–≤–µ–¥—ñ—Ç—å –Ω—ñ–∫–Ω–µ–π–º –≥—Ä–∞–≤—Ü—è: ")
	winOrLose := getIntInput("–ì—Ä–∞–≤–µ—Ü—å –ø–µ—Ä–µ–º—ñ–≥ —á–∏ –ø—Ä–æ–≥—Ä–∞–≤? (1 - –ø–µ—Ä–µ–º–æ–≥–∞ üèÜ, 0 - –ø–æ—Ä–∞–∑–∫–∞ ‚ùå): ")
	ratingChange := getIntInput("–í–≤–µ–¥—ñ—Ç—å –∑–º—ñ–Ω—É —Ä–µ–π—Ç–∏–Ω–≥—É: ")

	nick = strings.TrimSpace(nick)

	//–≤–∏–≤—ñ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É
	if winOrLose == 1 {
		updateRating(nick, true, ratingChange)
	} else if winOrLose == 0 {
		updateRating(nick, false, ratingChange)
	} else {
		fmt.Println("–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≥—Ä–∏.–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.‚ùå")
	}
}

// –æ–ø—Ü—ñ—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—è
func choiseFindPlayer() {
	fmt.Println("\n--- –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –ì—Ä–∞–≤—Ü—è --- üîç")

	//–æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω—ñ–∫—É
	input := getStringInput("–í–≤–µ–¥—ñ—Ç—å –Ω—ñ–∫–Ω–µ–π–º –≥—Ä–∞–≤—Ü—è: ")
	input = strings.TrimSpace(input)

	//–≤–∏–≤—ñ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è
	if playerExists(input) {
		fmt.Printf("\n–ì—Ä–∞–≤–µ—Ü—å \"%s\" –∑–Ω–∞–π–¥–µ–Ω. ‚úÖ\n", input)
	} else if !playerExists(input) {
		fmt.Printf("\n–ì—Ä–∞–≤–µ—Ü—å \"%s\" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω. ‚ùå\n", input)
	}
}

// –æ–ø—Ü—ñ—è –¥–ª—è –≤–∏–≤–æ–¥—É –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤
func choiseShowAllPlayer() {
	fmt.Println("\n--- –í—Å—ñ –≥—Ä–∞–≤—Ü—ñ --- üë•")
	//–≤–∏–≤—ñ–¥ –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤
	displayAllPlayers()
}

// –æ–ø—Ü—ñ—è –¥–ª—è –≤–∏–≤–æ–¥—É —Ç–æ–ø 10 –≥—Ä–∞–≤—Ü—ñ–≤
func choiseTopPlayers() {
	fmt.Println("\n--- –¢–æ–ø-10 –≥—Ä–∞–≤—Ü—ñ–≤ --- üèÜ")

	//–æ—Ç—Ä–∏–º–∞–Ω–Ω—è —á–∏—Å–ª–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–ø—É –≥—Ä–∞–≤—Ü—ñ–≤
	input := getIntInput("–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è: ")

	//–≤–∏–≤—ñ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ç–æ–ø
	if input > 0 && input <= 10 {
		fmt.Println("\n–¢–û–ü –ì–†–ê–í–¶–Ü:")
		getTopPlayers(input)
	} else {
		fmt.Println("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–∫–∞–∑–∞—Ç–∏ –≥—Ä–∞–≤—Ü—ñ–≤: –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 10. ‚ùå")
	}
}

// –æ–ø—Ü—ñ—è –ø–æ—à—É–∫ –∑–∞ –¥—ñ–∞–ø–æ–∑–æ–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥—É
func choiseFindByRatingRange() {
	fmt.Println("\n--- –ü–æ—à—É–∫ –∑–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥—É --- üìà")

	//–æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
	minRating := getIntInput("–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è: ")
	//–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—è
	if minRating == -1 {
		fmt.Println("–ü–æ—à—É–∫ –∑–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º –ø—Ä–∏–ø–∏–Ω–µ–Ω–æ - –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ. ‚ùå")
		return
	}

	//–æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
	maxRating := getIntInput("–í–≤–µ–¥—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è: ")
	//–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—è
	if maxRating == -1 {
		fmt.Println("–ü–æ—à—É–∫ –∑–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º –ø—Ä–∏–ø–∏–Ω–µ–Ω–æ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ. ‚ùå")
		return
	}

	//–≤–∏–≤—ñ–¥ –≥—Ä–∞–≤—Ü—ñ–≤ –∑–∞ –¥—ñ–∞–ø–æ–∑–æ–Ω–æ–º
	fmt.Println("\n–ì—Ä–∞–≤—Ü—ñ –∑–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥—É:")
	findPlayersByRatingRange(minRating, maxRating)
}

// –æ–ø—Ü—ñ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∞–≤—Ü—è
func choisePlayerStats() {
	fmt.Println("\n--- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∞–≤—Ü—è --- üìä")

	//–æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω—ñ–∫–Ω–µ–π–º–∞
	input := getStringInput("–í–≤–µ–¥—ñ—Ç—å –Ω—ñ–∫–Ω–µ–π–º –≥—Ä–∞–≤—Ü—è: ")
	input = strings.TrimSpace(input)

	//–≤–∏–≤—ñ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä–∞–≤—Ü—è
	displayPlayerStats(input)
}

// –æ–ø—Ü—ñ—è –∑–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
func choiseGlobalStats() {
	fmt.Println("\n---–ó–∞–≥–∞–ª—å–Ω–∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ --- üåçüìä")
	//–≤–∏–≤—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	displaySystemStats()
}

func main() {
	fmt.Println("=== –°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥—É –≥—Ä–∞–≤—Ü—ñ–≤ === üíª")
	//–≤–∏–≤—ñ–¥ –º–µ–Ω—é
	displayMenu()
	//—Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–∏
	for {
		//–æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É
		choise := getIntInput("> ")

		//–æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–ø—Ü—ñ—é –∑–∞ –≤–∏–±–æ—Ä–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—è
		switch choise {
		case 1:
			choiseRegPlayer()
		case 2:
			choiseDeletePlayer()
		case 3:
			choiseUpdateRating()
		case 4:
			choiseFindPlayer()
		case 5:
			choiseShowAllPlayer()
		case 6:
			choiseTopPlayers()
		case 7:
			choiseFindByRatingRange()
		case 8:
			choisePlayerStats()
		case 9:
			choiseGlobalStats()
		case 10:
			fmt.Println("\n–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è! üëã")
			return
		default:
			fmt.Println("\n–¢–∞–∫–æ–≥–æ –≤–∏–±–æ—Ä—É –Ω–µ —ñ—Å–Ω—É—î. ‚ùå")
		}
	}
}
